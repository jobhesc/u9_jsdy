//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5420
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.CompactFramework.Design.Data 2.0.50727.5420 版自动生成。
// 
namespace PDAClient.Entities {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LoginInfoDataSet")]
    public partial class LoginInfoDataSet : global::System.Data.DataSet {
        
        private LoginInfoDataTable tableLoginInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoginInfoDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoginInfoDataTable LoginInfo {
            get {
                return this.tableLoginInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LoginInfoDataSet cln = ((LoginInfoDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LoginInfo"] != null)) {
                    base.Tables.Add(new LoginInfoDataTable(ds.Tables["LoginInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLoginInfo = ((LoginInfoDataTable)(base.Tables["LoginInfo"]));
            if ((initTable == true)) {
                if ((this.tableLoginInfo != null)) {
                    this.tableLoginInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LoginInfoDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LoginInfoDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLoginInfo = new LoginInfoDataTable();
            base.Tables.Add(this.tableLoginInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoginInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LoginInfoDataSet ds = new LoginInfoDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LoginInfoRowChangeEventHandler(object sender, LoginInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoginInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIsSavePassword;
            
            private global::System.Data.DataColumn columnLastLoginUser;
            
            private global::System.Data.DataColumn columnLastPassword;
            
            private global::System.Data.DataColumn columnLastLoginTime;
            
            private global::System.Data.DataColumn columnLastLoginOrgID;
            
            private global::System.Data.DataColumn columnLastLoginOrgName;
            
            private global::System.Data.DataColumn columnLastLoginUserID;
            
            private global::System.Data.DataColumn columnLastLoginUserName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoDataTable() {
                this.TableName = "LoginInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoginInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSavePasswordColumn {
                get {
                    return this.columnIsSavePassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginUserColumn {
                get {
                    return this.columnLastLoginUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastPasswordColumn {
                get {
                    return this.columnLastPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginTimeColumn {
                get {
                    return this.columnLastLoginTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginOrgIDColumn {
                get {
                    return this.columnLastLoginOrgID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginOrgNameColumn {
                get {
                    return this.columnLastLoginOrgName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginUserIDColumn {
                get {
                    return this.columnLastLoginUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginUserNameColumn {
                get {
                    return this.columnLastLoginUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoRow this[int index] {
                get {
                    return ((LoginInfoRow)(this.Rows[index]));
                }
            }
            
            public event LoginInfoRowChangeEventHandler LoginInfoRowChanging;
            
            public event LoginInfoRowChangeEventHandler LoginInfoRowChanged;
            
            public event LoginInfoRowChangeEventHandler LoginInfoRowDeleting;
            
            public event LoginInfoRowChangeEventHandler LoginInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoginInfoRow(LoginInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoRow AddLoginInfoRow(bool IsSavePassword, string LastLoginUser, string LastPassword, System.DateTime LastLoginTime, long LastLoginOrgID, string LastLoginOrgName, long LastLoginUserID, string LastLoginUserName) {
                LoginInfoRow rowLoginInfoRow = ((LoginInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsSavePassword,
                        LastLoginUser,
                        LastPassword,
                        LastLoginTime,
                        LastLoginOrgID,
                        LastLoginOrgName,
                        LastLoginUserID,
                        LastLoginUserName};
                rowLoginInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoginInfoRow);
                return rowLoginInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoRow FindByLastLoginUser(string LastLoginUser) {
                return ((LoginInfoRow)(this.Rows.Find(new object[] {
                            LastLoginUser})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoginInfoDataTable cln = ((LoginInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoginInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsSavePassword = base.Columns["IsSavePassword"];
                this.columnLastLoginUser = base.Columns["LastLoginUser"];
                this.columnLastPassword = base.Columns["LastPassword"];
                this.columnLastLoginTime = base.Columns["LastLoginTime"];
                this.columnLastLoginOrgID = base.Columns["LastLoginOrgID"];
                this.columnLastLoginOrgName = base.Columns["LastLoginOrgName"];
                this.columnLastLoginUserID = base.Columns["LastLoginUserID"];
                this.columnLastLoginUserName = base.Columns["LastLoginUserName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsSavePassword = new global::System.Data.DataColumn("IsSavePassword", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSavePassword);
                this.columnLastLoginUser = new global::System.Data.DataColumn("LastLoginUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginUser);
                this.columnLastPassword = new global::System.Data.DataColumn("LastPassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastPassword);
                this.columnLastLoginTime = new global::System.Data.DataColumn("LastLoginTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginTime);
                this.columnLastLoginOrgID = new global::System.Data.DataColumn("LastLoginOrgID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginOrgID);
                this.columnLastLoginOrgName = new global::System.Data.DataColumn("LastLoginOrgName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginOrgName);
                this.columnLastLoginUserID = new global::System.Data.DataColumn("LastLoginUserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginUserID);
                this.columnLastLoginUserName = new global::System.Data.DataColumn("LastLoginUserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginUserName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLastLoginUser}, true));
                this.columnLastLoginUser.AllowDBNull = false;
                this.columnLastLoginUser.Unique = true;
                this.columnLastLoginUser.MaxLength = 100;
                this.columnLastPassword.MaxLength = 100;
                this.columnLastLoginOrgID.AllowDBNull = false;
                this.columnLastLoginOrgName.MaxLength = 100;
                this.columnLastLoginUserID.AllowDBNull = false;
                this.columnLastLoginUserName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoRow NewLoginInfoRow() {
                return ((LoginInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoginInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoginInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoginInfoRowChanged != null)) {
                    this.LoginInfoRowChanged(this, new LoginInfoRowChangeEvent(((LoginInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoginInfoRowChanging != null)) {
                    this.LoginInfoRowChanging(this, new LoginInfoRowChangeEvent(((LoginInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoginInfoRowDeleted != null)) {
                    this.LoginInfoRowDeleted(this, new LoginInfoRowChangeEvent(((LoginInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoginInfoRowDeleting != null)) {
                    this.LoginInfoRowDeleting(this, new LoginInfoRowChangeEvent(((LoginInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoginInfoRow(LoginInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LoginInfoDataSet ds = new LoginInfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoginInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LoginInfoRow : global::System.Data.DataRow {
            
            private LoginInfoDataTable tableLoginInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoginInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoginInfo = ((LoginInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSavePassword {
                get {
                    try {
                        return ((bool)(this[this.tableLoginInfo.IsSavePasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“LoginInfo”中列“IsSavePassword”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLoginInfo.IsSavePasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastLoginUser {
                get {
                    return ((string)(this[this.tableLoginInfo.LastLoginUserColumn]));
                }
                set {
                    this[this.tableLoginInfo.LastLoginUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastPassword {
                get {
                    try {
                        return ((string)(this[this.tableLoginInfo.LastPasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“LoginInfo”中列“LastPassword”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLoginInfo.LastPasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastLoginTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLoginInfo.LastLoginTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“LoginInfo”中列“LastLoginTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLoginInfo.LastLoginTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LastLoginOrgID {
                get {
                    return ((long)(this[this.tableLoginInfo.LastLoginOrgIDColumn]));
                }
                set {
                    this[this.tableLoginInfo.LastLoginOrgIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastLoginOrgName {
                get {
                    try {
                        return ((string)(this[this.tableLoginInfo.LastLoginOrgNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“LoginInfo”中列“LastLoginOrgName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLoginInfo.LastLoginOrgNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LastLoginUserID {
                get {
                    return ((long)(this[this.tableLoginInfo.LastLoginUserIDColumn]));
                }
                set {
                    this[this.tableLoginInfo.LastLoginUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastLoginUserName {
                get {
                    try {
                        return ((string)(this[this.tableLoginInfo.LastLoginUserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“LoginInfo”中列“LastLoginUserName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableLoginInfo.LastLoginUserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSavePasswordNull() {
                return this.IsNull(this.tableLoginInfo.IsSavePasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSavePasswordNull() {
                this[this.tableLoginInfo.IsSavePasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastPasswordNull() {
                return this.IsNull(this.tableLoginInfo.LastPasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastPasswordNull() {
                this[this.tableLoginInfo.LastPasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastLoginTimeNull() {
                return this.IsNull(this.tableLoginInfo.LastLoginTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastLoginTimeNull() {
                this[this.tableLoginInfo.LastLoginTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastLoginOrgNameNull() {
                return this.IsNull(this.tableLoginInfo.LastLoginOrgNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastLoginOrgNameNull() {
                this[this.tableLoginInfo.LastLoginOrgNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastLoginUserNameNull() {
                return this.IsNull(this.tableLoginInfo.LastLoginUserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastLoginUserNameNull() {
                this[this.tableLoginInfo.LastLoginUserNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class LoginInfoRowChangeEvent : global::System.EventArgs {
            
            private LoginInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoRowChangeEvent(LoginInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoginInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PDAClient.Entities.LoginInfoDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class LoginInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoginInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LoginInfo";
            tableMapping.ColumnMappings.Add("IsSavePassword", "IsSavePassword");
            tableMapping.ColumnMappings.Add("LastLoginUser", "LastLoginUser");
            tableMapping.ColumnMappings.Add("LastPassword", "LastPassword");
            tableMapping.ColumnMappings.Add("LastLoginTime", "LastLoginTime");
            tableMapping.ColumnMappings.Add("LastLoginOrgID", "LastLoginOrgID");
            tableMapping.ColumnMappings.Add("LastLoginOrgName", "LastLoginOrgName");
            tableMapping.ColumnMappings.Add("LastLoginUserID", "LastLoginUserID");
            tableMapping.ColumnMappings.Add("LastLoginUserName", "LastLoginUserName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [LoginInfo] WHERE (([LastLoginUser] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUser";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [LoginInfo] ([IsSavePassword], [LastLoginUser], [LastPassword], [Last" +
                "LoginTime], [LastLoginOrgID], [LastLoginOrgName], [LastLoginUserID], [LastLoginU" +
                "serName]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsSavePassword";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUser";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "LastPassword";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastLoginTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "LastLoginOrgID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginOrgName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUserID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUserName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [LoginInfo] SET [IsSavePassword] = @p1, [LastLoginUser] = @p2, [LastPasswo" +
                "rd] = @p3, [LastLoginTime] = @p4, [LastLoginOrgID] = @p5, [LastLoginOrgName] = @" +
                "p6, [LastLoginUserID] = @p7, [LastLoginUserName] = @p8 WHERE (([LastLoginUser] =" +
                " @p9))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsSavePassword";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUser";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "LastPassword";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastLoginTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "LastLoginOrgID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginOrgName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.Int64;
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUserID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUserName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.IsNullable = true;
            param.SourceColumn = "LastLoginUser";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\PDABarCode.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IsSavePassword], [LastLoginUser], [LastPassword], [LastLoginTime], [LastL" +
                "oginOrgID], [LastLoginOrgName], [LastLoginUserID], [LastLoginUserName] FROM [Log" +
                "inInfo]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(LoginInfoDataSet.LoginInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual LoginInfoDataSet.LoginInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            LoginInfoDataSet.LoginInfoDataTable dataTable = new LoginInfoDataSet.LoginInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(LoginInfoDataSet.LoginInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(LoginInfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LoginInfo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<bool> p1, string p2, string p3, global::System.Nullable<global::System.DateTime> p4, long p5, string p6, long p7, string p8) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(p5));
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(p7));
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<bool> p1, string p2, string p3, global::System.Nullable<global::System.DateTime> p4, long p5, string p6, long p7, string p8, string p9) {
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(p5));
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(p7));
            if ((p8 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                throw new global::System.ArgumentNullException("p9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(p9));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<bool> p1, string p3, global::System.Nullable<global::System.DateTime> p4, long p5, string p6, long p7, string p8, string p9) {
            return this.Update(p1, p9, p3, p4, p5, p6, p7, p8, p9);
        }
    }
}
namespace LoginInfoDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
